{"version":3,"sources":["calcs/attack-types.ts","styled/form-paper.ts","styled/field.tsx","styled/select.tsx","calcs/base-attacks.ts","calcs/calc-and-format.ts","calcs/skills/zeal.ts","calcs/skills/dragon-talon.ts","calcs/skills/strafe.ts","App.tsx","index.tsx"],"names":["AttackTypes","FormPaper","matStyled","Paper","padding","StyledField","TextField","OutputField","width","StyledSelect","Select","minWidth","attackTypesDescriptionMap","SMITE","PALADIN_ZEAL","STRAFE","DRAGON_TALON","attackTypesList","Object","entries","map","key","label","value","baseAF","animLength","gias","sias","wsm","animSpeed","animRate","itemEIAS","Math","floor","EIAS","animDiv","ceil","rollbackAF","calc","attackType","zeal","dragonTalon","strafe","AppWrapper","styled","div","makeMenuItems","srcArray","item","hasOwnProperty","call","MenuItem","wsmMenuItems","attackTypeMenuItems","App","useState","inputDataState","setInputDataState","handleFormStateInput","field","fieldType","rawValue","length","intValue","parseInt","targetValue","isNaN","handleChange","event","target","handleSelectChange","resultText","useMemo","srcGias","srcSias","srcWsm","every","arg","textValue","join","calcAndFormat","Typography","variant","elevation","Box","component","noValidate","autoComplete","FormControl","type","onChange","InputLabel","id","labelId","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bad08818.chunk.js","sourcesContent":["export enum AttackTypes {\n    SMITE = \"SMITE\",\n    DRAGON_TALON = \"DRAGON_TALON\",\n    STRAFE = \"STRAFE\",\n    PALADIN_ZEAL = \"PALADIN_ZEAL\",\n}\n\nexport const attackTypesDescriptionMap: {[key in AttackTypes] : string} = {\n    [AttackTypes.SMITE]: 'Paladin - Smite',\n    [AttackTypes.PALADIN_ZEAL]: 'Paladin - Zeal',\n    [AttackTypes.STRAFE]: 'Amazon - Strafe',\n    [AttackTypes.DRAGON_TALON]: 'Assassin - DTalon',\n}\n\nexport const attackTypesList: Array<{value: AttackTypes, label: string}> =\n    Object.entries(attackTypesDescriptionMap)\n        .map(([key, value]) => ({\n            label: value,\n            value: key as AttackTypes,\n        }))\n","import {styled as matStyled} from \"@mui/material/styles\";\nimport {Paper} from \"@mui/material\";\n\nexport const FormPaper = matStyled(Paper)({\n    padding: '24px',\n});\n","import {styled as matStyled} from \"@mui/material/styles\";\nimport {TextField} from \"@mui/material\";\n\nexport const StyledField = matStyled(TextField)({\n});\n\nexport const OutputField = matStyled(StyledField)({\n   width: '390px',\n});\n","import {styled as matStyled} from \"@mui/material/styles\";\nimport {Select} from \"@mui/material\";\n\nexport const StyledSelect = matStyled(Select)({\n    minWidth: '195px',\n})\n","export function baseAF(\n    animLength: number,\n    gias: number,\n    sias: number,\n    wsm: number,\n    animSpeed = 256\n) {\n    const animRate = 100;\n    const itemEIAS = Math.floor(120 * gias / (120 + gias));\n    const EIAS = sias + itemEIAS - wsm;\n    const animDiv =  Math.floor( animSpeed * (animRate + EIAS) / 100 );\n    return Math.ceil(animLength * 256 / animDiv) - 1;\n}\n\nexport function rollbackAF(\n    animLength: number,\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    return baseAF(animLength, gias, sias, wsm) + 1;\n}\n","import {AttackTypes, attackTypesDescriptionMap} from \"./attack-types\";\nimport {baseAF} from \"./base-attacks\";\nimport {dragonTalon} from \"./skills/dragon-talon\";\nimport {strafe} from \"./skills/strafe\";\nimport {zeal} from \"./skills/zeal\";\n\nfunction calc(\n    attackType: AttackTypes,\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    switch(attackType) {\n        case AttackTypes.SMITE:\n            return [baseAF(12, gias, sias, wsm)];\n\n        case AttackTypes.PALADIN_ZEAL:\n            return zeal(gias, sias, wsm);\n\n        case AttackTypes.DRAGON_TALON:\n            return dragonTalon(gias, sias, wsm);\n\n        case AttackTypes.STRAFE:\n            return strafe(gias, sias, wsm);\n    }\n}\n\nexport function calcAndFormat(\n    attackType: AttackTypes,\n    srcGias: string,\n    srcSias: string,\n    srcWsm: string,\n) {\n    const isOk = [srcSias, srcSias, srcWsm].every(\n        arg => typeof arg !== 'undefined' && arg.length > 0 && !isNaN(parseInt(arg))\n    ) && attackType !== null;\n\n    if (!isOk) {\n        return null;\n    }\n\n    const gias = parseInt(srcGias);\n    const sias = parseInt(srcSias);\n    const wsm = parseInt(srcWsm);\n\n    const textValue = calc(attackType, gias, sias, wsm)?.join('/');\n\n    return `${attackTypesDescriptionMap[attackType]} frames: ${textValue}`;\n}\n","import {baseAF, rollbackAF} from \"../base-attacks\";\n\nexport function zeal(\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    return [\n        rollbackAF( 7, gias, sias, wsm ),\n        baseAF( 15, gias, sias, wsm ),\n    ];\n}\n","import {baseAF, rollbackAF} from \"../base-attacks\";\n\nexport function dragonTalon(\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    return [\n        rollbackAF( 4, gias, sias, wsm ),\n        baseAF( 13, gias, sias, wsm ),\n    ]\n}\n","import {baseAF, rollbackAF} from \"../base-attacks\";\n\nexport function strafe(\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    return [\n        baseAF(7, gias, sias, wsm),\n        rollbackAF(3, gias, sias, wsm),\n        baseAF(11, gias, sias, wsm),\n    ]\n}\n","import React, {useMemo, useState} from 'react';\nimport '@fontsource/roboto';\nimport {Box, FormControl, InputLabel, MenuItem, SelectChangeEvent, Typography} from \"@mui/material\";\n\nimport styled from \"styled-components\";\nimport {FormPaper} from \"styled/form-paper\";\nimport {OutputField, StyledField} from \"styled/field\";\nimport {StyledSelect} from \"styled/select\";\nimport {AttackTypes, attackTypesList} from \"./calcs/attack-types\";\nimport {calcAndFormat} from \"./calcs/calc-and-format\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  row-gap: 12px;\n`;\n\nconst makeMenuItems = (srcArray: Array<string | { label: string; value: any; }>) => {\n    return srcArray.map(item => {\n        const [label, value] =\n            (Object.hasOwnProperty.call(item, 'label') && Object.hasOwnProperty.call(item, 'value'))\n            ? [\n                    (item as { label: string; value: any; }).label,\n                    (item as { label: string; value: any; }).value,\n            ]\n            : [item, item];\n\n        return <MenuItem key={value} value={value}>{label}</MenuItem>;\n    });\n}\n\nconst wsmMenuItems = makeMenuItems([\n    '-60',\n    '-50',\n    '-40',\n    '-30',\n    '-20',\n    '-10',\n    '0',\n    '10',\n    '20',\n    '30',\n])\n\nconst attackTypeMenuItems = makeMenuItems(attackTypesList);\n\ninterface InputData {\n    gias: string;\n    sias: string;\n    wsm: string;\n    attackType: AttackTypes;\n}\n\ntype FieldType = 'integer' | 'attackTypes';\n\nfunction App() {\n    const [inputDataState, setInputDataState] = useState<InputData>({\n        gias: '',\n        sias: '',\n        wsm: '',\n        attackType: AttackTypes.SMITE,\n    });\n\n    const handleFormStateInput = (field: keyof InputData, fieldType: FieldType, rawValue: string) => {\n        if (typeof rawValue === 'undefined' || rawValue?.length < 1) {\n            setInputDataState({\n                ...inputDataState,\n                [field]: '',\n            })\n            return;\n        }\n\n        switch (fieldType) {\n            case 'attackTypes':\n                setInputDataState({\n                    ...inputDataState,\n                    [field]: rawValue,\n                });\n                break;\n\n            case 'integer':\n            default:\n                (() => {\n                    const intValue = parseInt(rawValue);\n                    let targetValue = '' + intValue;\n                    if (isNaN(intValue)) {\n                        targetValue = '';\n                    }\n\n                    setInputDataState({\n                        ...inputDataState,\n                        [field]: targetValue,\n                    });\n                })()\n        }\n    }\n\n    const handleChange = (field: keyof InputData, fieldType: FieldType = 'integer') =>\n        (event: React.ChangeEvent<HTMLInputElement>) =>\n            handleFormStateInput(field, fieldType, event.target.value);\n\n    const handleSelectChange = (field: keyof InputData, fieldType: FieldType = 'integer') =>\n        (event: SelectChangeEvent<unknown>) =>\n            handleFormStateInput(field, fieldType, event.target.value as string);\n\n    const resultText = useMemo(\n        () => {\n            return calcAndFormat(\n                inputDataState.attackType,\n                inputDataState.gias,\n                inputDataState.sias,\n                inputDataState.wsm,\n            );\n        },\n        [inputDataState],\n    )\n\n    return (\n        <AppWrapper>\n            <Typography variant={'h3'}>\n                Uncapped IAS Calculator\n            </Typography>\n\n            <FormPaper elevation={12}>\n                <Box\n                    component=\"form\"\n                    noValidate\n                    autoComplete=\"off\"\n                >\n                    <FormControl>\n                        <StyledField\n                            label=\"Items IAS\"\n                            variant=\"outlined\"\n                            type={'number'}\n                            onChange={handleChange('gias')}\n                            value={inputDataState.gias}\n                        />\n                    </FormControl>\n\n                    <FormControl>\n                        <StyledField\n                            label=\"Skills IAS\"\n                            variant=\"outlined\"\n                            type={'number'}\n                            onChange={handleChange('sias')}\n                            value={inputDataState.sias}\n                        />\n                    </FormControl>\n\n                    <FormControl>\n                        <InputLabel id=\"wsm-label\">Weapon Speed</InputLabel>\n                        <StyledSelect\n                            labelId=\"wsm-label\"\n                            value={inputDataState.wsm}\n                            label=\"Weapon Speed\"\n                            onChange={handleSelectChange('wsm')}\n                        >\n                            {wsmMenuItems}\n                        </StyledSelect>\n                    </FormControl>\n\n                    <FormControl>\n                        <InputLabel id=\"attack-type-label\">Attack Type</InputLabel>\n                        <StyledSelect\n                            labelId='attack-type-label'\n                            value={inputDataState.attackType}\n                            label='Attack Type'\n                            onChange={handleSelectChange('attackType', 'attackTypes')}\n                        >\n                            {attackTypeMenuItems}\n                        </StyledSelect>\n                    </FormControl>\n                </Box>\n            </FormPaper>\n\n            <FormPaper elevation={12}>\n                <OutputField\n                    placeholder={'Please fill out the form'}\n                    value={resultText ?? ''}\n                />\n            </FormPaper>\n        </AppWrapper>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}