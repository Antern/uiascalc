{"version":3,"sources":["calcs/attack-types.ts","styled/form-paper.ts","styled/field.tsx","styled/select.tsx","calcs/base-attacks.ts","calcs/calc-and-format.ts","calcs/skills/dragon-talon.ts","App.tsx","index.tsx"],"names":["AttackTypes","FormPaper","matStyled","Paper","padding","StyledField","TextField","OutputField","width","StyledSelect","Select","minWidth","baseAF","animLength","gias","sias","wsm","animSpeed","animRate","itemEIAS","Math","floor","EIAS","animDiv","ceil","rollbackAF","calcAndFormat","attackType","srcGias","srcSias","srcWsm","every","arg","length","isNaN","parseInt","SMITE","DRAGON_TALON","dragonTalon","join","AppWrapper","styled","div","makeMenuItems","srcArray","map","item","Object","hasOwnProperty","call","label","value","MenuItem","wsmMenuItems","attackTypeMenuItems","App","useState","inputDataState","setInputDataState","handleFormStateInput","field","fieldType","rawValue","intValue","targetValue","handleChange","event","target","handleSelectChange","resultText","useMemo","Typography","variant","elevation","Box","component","noValidate","autoComplete","FormControl","type","onChange","InputLabel","id","labelId","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4384bb88.chunk.js","sourcesContent":["export enum AttackTypes {\n    SMITE = \"SMITE\",\n    DRAGON_TALON = \"DRAGON_TALON\",\n}\n","import {styled as matStyled} from \"@mui/material/styles\";\nimport {Paper} from \"@mui/material\";\n\nexport const FormPaper = matStyled(Paper)({\n    padding: '24px',\n});\n","import {styled as matStyled} from \"@mui/material/styles\";\nimport {TextField} from \"@mui/material\";\n\nexport const StyledField = matStyled(TextField)({\n});\n\nexport const OutputField = matStyled(StyledField)({\n   width: '390px',\n});\n","import {styled as matStyled} from \"@mui/material/styles\";\nimport {Select} from \"@mui/material\";\n\nexport const StyledSelect = matStyled(Select)({\n    minWidth: '195px',\n})\n","export function baseAF(\n    animLength: number,\n    gias: number,\n    sias: number,\n    wsm: number,\n    animSpeed = 256\n) {\n    const animRate = 100;\n    const itemEIAS = Math.floor(120 * gias / (120 + gias));\n    const EIAS = sias + itemEIAS - wsm;\n    const animDiv =  Math.floor( animSpeed * (animRate + EIAS) / 100 );\n    return Math.ceil(animLength * 256 / animDiv) - 1;\n}\n\nexport function rollbackAF(\n    animLength: number,\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    return baseAF(animLength, gias, sias, wsm) + 1;\n}\n\n// function zeal(gias, sias, wsm) {\n//     return [\n//         rollbackAF( 7, gias, sias, wsm ),\n//         baseAF( 15, gias, sias, wsm ).result,\n//     ];\n// }\n//\n// function strafe(gias, sias, wsm) {\n//     return [\n//         baseAF(7, gias, sias, wsm).result,\n//         rollbackAF(3, gias, sias, wsm),\n//         baseAF(11, gias, sias, wsm).result,\n//     ]\n// }\n","import {AttackTypes} from \"./attack-types\";\nimport {baseAF} from \"./base-attacks\";\nimport {dragonTalon} from \"./skills/dragon-talon\";\n\nexport function calcAndFormat(\n    attackType: AttackTypes,\n    srcGias: string,\n    srcSias: string,\n    srcWsm: string,\n) {\n    const isOk = [srcSias, srcSias, srcWsm].every(\n        arg => typeof arg !== 'undefined' && arg.length > 0 && !isNaN(parseInt(arg))\n    ) && attackType !== null;\n\n    if (!isOk) {\n        return null;\n    }\n\n    const gias = parseInt(srcGias);\n    const sias = parseInt(srcSias);\n    const wsm = parseInt(srcWsm);\n\n    switch(attackType) {\n        case AttackTypes.SMITE:\n            return `Smite frames: ${baseAF(12, gias, sias, wsm)}`;\n\n        case AttackTypes.DRAGON_TALON:\n            return `Dragon talon frames: ${dragonTalon(gias, sias, wsm).join('/')}`;\n    }\n}\n","import {baseAF, rollbackAF} from \"../base-attacks\";\n\nexport function dragonTalon(\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    return [\n        rollbackAF( 4, gias, sias, wsm ),\n        baseAF( 13, gias, sias, wsm ),\n    ]\n}\n","import React, {useMemo, useState} from 'react';\nimport '@fontsource/roboto';\nimport {Box, FormControl, InputLabel, MenuItem, SelectChangeEvent, Typography} from \"@mui/material\";\n\nimport styled from \"styled-components\";\nimport {FormPaper} from \"styled/form-paper\";\nimport {OutputField, StyledField} from \"styled/field\";\nimport {StyledSelect} from \"styled/select\";\nimport {AttackTypes} from \"./calcs/attack-types\";\nimport {calcAndFormat} from \"./calcs/calc-and-format\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  row-gap: 12px;\n`;\n\nconst makeMenuItems = (srcArray: Array<string | { label: string; value: any; }>) => {\n    return srcArray.map(item => {\n        const [label, value] =\n            (Object.hasOwnProperty.call(item, 'label') && Object.hasOwnProperty.call(item, 'value'))\n            ? [\n                    (item as { label: string; value: any; }).label,\n                    (item as { label: string; value: any; }).value,\n            ]\n            : [item, item];\n\n        return <MenuItem key={value} value={value}>{label}</MenuItem>;\n    });\n}\n\nconst wsmMenuItems = makeMenuItems([\n    '-60',\n    '-50',\n    '-40',\n    '-30',\n    '-20',\n    '-10',\n    '0',\n    '10',\n    '20',\n    '30',\n])\n\nconst attackTypeMenuItems = makeMenuItems([\n    {value: AttackTypes.SMITE, label: 'Paladin - Smite'},\n    {value: AttackTypes.DRAGON_TALON, label: 'Assassin - DTalon'},\n] as Array<{value: AttackTypes, label: string}>);\n\ninterface InputData {\n    gias: string;\n    sias: string;\n    wsm: string;\n    attackType: AttackTypes;\n}\n\ntype FieldType = 'integer' | 'attackTypes';\n\nfunction App() {\n    const [inputDataState, setInputDataState] = useState<InputData>({\n        gias: '',\n        sias: '',\n        wsm: '',\n        attackType: AttackTypes.SMITE,\n    });\n\n    const handleFormStateInput = (field: keyof InputData, fieldType: FieldType, rawValue: string) => {\n        if (typeof rawValue === 'undefined' || rawValue?.length < 1) {\n            setInputDataState({\n                ...inputDataState,\n                [field]: '',\n            })\n            return;\n        }\n\n        switch (fieldType) {\n            case 'attackTypes':\n                setInputDataState({\n                    ...inputDataState,\n                    [field]: rawValue,\n                });\n                break;\n\n            case 'integer':\n            default:\n                (() => {\n                    const intValue = parseInt(rawValue);\n                    let targetValue = '' + intValue;\n                    if (isNaN(intValue)) {\n                        targetValue = '';\n                    }\n\n                    setInputDataState({\n                        ...inputDataState,\n                        [field]: targetValue,\n                    });\n                })()\n        }\n    }\n\n    const handleChange = (field: keyof InputData, fieldType: FieldType = 'integer') =>\n        (event: React.ChangeEvent<HTMLInputElement>) =>\n            handleFormStateInput(field, fieldType, event.target.value);\n\n    const handleSelectChange = (field: keyof InputData, fieldType: FieldType = 'integer') =>\n        (event: SelectChangeEvent<unknown>) =>\n            handleFormStateInput(field, fieldType, event.target.value as string);\n\n    const resultText = useMemo(\n        () => {\n            return calcAndFormat(\n                inputDataState.attackType,\n                inputDataState.gias,\n                inputDataState.sias,\n                inputDataState.wsm,\n            );\n        },\n        [inputDataState],\n    )\n\n    return (\n        <AppWrapper>\n            <Typography variant={'h3'}>\n                Uncapped IAS Calculator\n            </Typography>\n\n            <FormPaper elevation={12}>\n                <Box\n                    component=\"form\"\n                    noValidate\n                    autoComplete=\"off\"\n                >\n                    <FormControl>\n                        <StyledField\n                            label=\"Items IAS\"\n                            variant=\"outlined\"\n                            type={'number'}\n                            onChange={handleChange('gias')}\n                            value={inputDataState.gias}\n                        />\n                    </FormControl>\n\n                    <FormControl>\n                        <StyledField\n                            label=\"Skills IAS\"\n                            variant=\"outlined\"\n                            type={'number'}\n                            onChange={handleChange('sias')}\n                            value={inputDataState.sias}\n                        />\n                    </FormControl>\n\n                    <FormControl>\n                        <InputLabel id=\"wsm-label\">WSM</InputLabel>\n                        <StyledSelect\n                            labelId=\"wsm-label\"\n                            value={inputDataState.wsm}\n                            label=\"Weapon Speed\"\n                            onChange={handleSelectChange('wsm')}\n                        >\n                            {wsmMenuItems}\n                        </StyledSelect>\n                    </FormControl>\n\n                    <FormControl>\n                        <InputLabel id=\"attack-type-label\">Attack Type</InputLabel>\n                        <StyledSelect\n                            labelId='attack-type-label'\n                            value={inputDataState.attackType}\n                            label='Attack Type'\n                            onChange={handleSelectChange('attackType', 'attackTypes')}\n                        >\n                            {attackTypeMenuItems}\n                        </StyledSelect>\n                    </FormControl>\n                </Box>\n            </FormPaper>\n\n            <FormPaper elevation={12}>\n                <OutputField\n                    placeholder={'Please fill out the form'}\n                    value={resultText ?? ''}\n                />\n            </FormPaper>\n        </AppWrapper>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}