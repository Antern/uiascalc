{"version":3,"sources":["types/attack-types.ts","calcs/base-attacks.ts","calcs/calc-and-format.ts","calcs/skills/zeal.ts","calcs/skills/dragon-talon.ts","calcs/skills/strafe.ts","styled/form-paper.ts","styled/form-fields-layout.ts","styled/select.tsx","styled/field.tsx","contexts/stored-state-context.tsx","components/main-calc.tsx","components/stored-results.tsx","App.tsx","index.tsx"],"names":["AttackTypes","attackTypesDescriptionMap","ROGUE_ATTACK","TOWN_GUARD_ATTACK_JAB","SORC_ATTACK_1h_SWORD_AXE","SORC_ATTACK_2h_SWORD","SORC_ATTACK_2h_AXE","SORC_ATTACK_XBOW","SMITE","PALADIN_ZEAL","STRAFE","DRAGON_TALON","attackTypesList","Object","entries","map","key","label","value","baseAF","animLength","gias","sias","wsm","animSpeed","animRate","itemEIAS","Math","floor","EIAS","animDiv","ceil","rollbackAF","calc","attackType","zeal","dragonTalon","strafe","calcAndFormat","inputData","every","arg","length","isNaN","parseInt","textValue","join","FormPaper","matStyled","Paper","padding","FormFieldsLayout","styled","div","StyledSelect","Select","minWidth","StyledField","TextField","OutputField","StoredStateContext","React","createContext","StoredStateProvider","children","useLocalStorage","items","storedState","setStoredState","storedStateValue","pushItem","item","removeItem","srcItem","srcItemJSON","JSON","stringify","idx","findIndex","newItemsList","slice","Provider","makeMenuItems","srcArray","hasOwnProperty","call","MenuItem","wsmMenuItems","attackTypeMenuItems","MainCalc","useContext","useState","inputDataState","setInputDataState","handleFormStateInput","field","fieldType","rawValue","intValue","targetValue","handleChange","event","target","handleSelectChange","resultText","useMemo","elevation","Box","component","noValidate","autoComplete","FormControl","InputLabel","id","labelId","onChange","variant","type","placeholder","Button","disabled","onClick","FullHeightPaper","minHeight","StoredResults","itemsToRender","result","filter","row","Table","sx","aria-label","TableHead","TableRow","TableCell","align","TableBody","border","scope","Typography","color","IconButton","AppWrapper","RowWrapper","ColumnWrapper","props","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a683abc6.chunk.js","sourcesContent":["export enum AttackTypes {\n    SMITE = \"SMITE\",\n    DRAGON_TALON = \"DRAGON_TALON\",\n    STRAFE = \"STRAFE\",\n    PALADIN_ZEAL = \"PALADIN_ZEAL\",\n    SORC_ATTACK_1h_SWORD_AXE = \"SORC_ATTACK_1h_SWORD_AXE\",\n    SORC_ATTACK_2h_SWORD = \"SORC_ATTACK_2h_SWORD\",\n    SORC_ATTACK_2h_AXE = \"SORC_ATTACK_2h_AXE\",\n    SORC_ATTACK_XBOW = \"SORC_ATTACK_XBOW\",\n    ROGUE_ATTACK = \"ROGUE_ATTACK\",\n    TOWN_GUARD_ATTACK_JAB = \"TOWN_GUARD_ATTACK_JAB\"\n}\n\nexport const attackTypesDescriptionMap: {[key in AttackTypes] : string} = {\n    [AttackTypes.ROGUE_ATTACK]: 'Rogue - attack',\n    [AttackTypes.TOWN_GUARD_ATTACK_JAB]: 'Town Guard - attack/jab',\n    [AttackTypes.SORC_ATTACK_1h_SWORD_AXE]: 'Sorc - 1h Sword/Axe swing',\n    [AttackTypes.SORC_ATTACK_2h_SWORD]: 'Sorc - 2h Sword swing',\n    [AttackTypes.SORC_ATTACK_2h_AXE]: 'Sorc - 2h Axe swing',\n    [AttackTypes.SORC_ATTACK_XBOW]: 'Sorc - Crossbow',\n    [AttackTypes.SMITE]: 'Paladin - Smite',\n    [AttackTypes.PALADIN_ZEAL]: 'Paladin - Zeal',\n    [AttackTypes.STRAFE]: 'Amazon - Strafe',\n    [AttackTypes.DRAGON_TALON]: 'Assassin - DTalon',\n}\n\nexport const attackTypesList: Array<{value: AttackTypes, label: string}> =\n    Object.entries(attackTypesDescriptionMap)\n        .map(([key, value]) => ({\n            label: value,\n            value: key as AttackTypes,\n        }))\n","export function baseAF(\n    animLength: number,\n    gias: number,\n    sias: number,\n    wsm: number,\n    animSpeed = 256\n) {\n    const animRate = 100;\n    const itemEIAS = Math.floor(120 * gias / (120 + gias));\n    const EIAS = sias + itemEIAS - wsm;\n    const animDiv =  Math.floor( animSpeed * (animRate + EIAS) / 100 );\n    return Math.ceil(animLength * 256 / animDiv) - 1;\n}\n\nexport function rollbackAF(\n    animLength: number,\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    return baseAF(animLength, gias, sias, wsm) + 1;\n}\n\n// export function sequenceAF(\n//     animLength: number,\n//     gias: number,\n//     sias: number,\n//     wsm: number,\n//     animSpeed = 256\n// ) {\n//     const animRate = 100;\n//     const itemEIAS = Math.floor(120 * gias / (120 + gias));\n//     const animDiv = Math.floor( animSpeed * (animRate + sias + itemEIAS - (wsm + 30)) / 100 );\n//     return animLength * 256 / animDiv;\n// }\n","import {AttackTypes, attackTypesDescriptionMap} from \"../types/attack-types\";\nimport {baseAF, rollbackAF} from \"./base-attacks\";\nimport {dragonTalon} from \"./skills/dragon-talon\";\nimport {strafe} from \"./skills/strafe\";\nimport {zeal} from \"./skills/zeal\";\nimport {InputData} from \"../types/input-data\";\n\nfunction calc(\n    attackType: AttackTypes,\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    switch(attackType) {\n        case AttackTypes.PALADIN_ZEAL:\n            return zeal(gias, sias, wsm);\n\n        case AttackTypes.DRAGON_TALON:\n            return dragonTalon(gias, sias, wsm);\n\n        case AttackTypes.STRAFE:\n            return strafe(gias, sias, wsm);\n\n        case AttackTypes.SORC_ATTACK_1h_SWORD_AXE:\n            return [baseAF(18, gias, sias, wsm)];\n\n        case AttackTypes.SORC_ATTACK_2h_SWORD:\n            return [baseAF(22, gias, sias, wsm)];\n\n        case AttackTypes.SORC_ATTACK_2h_AXE:\n            return [baseAF(16, gias, sias, wsm)];\n\n        case AttackTypes.SORC_ATTACK_XBOW:\n            return [baseAF(20, gias, sias, wsm)];\n\n        case AttackTypes.ROGUE_ATTACK:\n            return [baseAF(15, gias, sias, wsm)];\n\n        case AttackTypes.TOWN_GUARD_ATTACK_JAB:\n            return [\n                baseAF(16, gias, sias, wsm),\n                rollbackAF(14, gias, sias, wsm) / 2,\n            ];\n\n        default:\n        case AttackTypes.SMITE:\n            return [baseAF(12, gias, sias, wsm)];\n    }\n}\n\nexport function calcAndFormat(inputData: InputData): {label: string; value: string;} | null {\n    const isOk = [\n        inputData.gias,\n        inputData.sias,\n        inputData.wsm,\n    ].every(\n        arg => typeof arg !== 'undefined' && arg.length > 0 && !isNaN(parseInt(arg))\n    ) && inputData.attackType !== null;\n\n    if (!isOk) {\n        return null;\n    }\n\n    const gias = parseInt(inputData.gias);\n    const sias = parseInt(inputData.sias);\n    const wsm = parseInt(inputData.wsm);\n\n    const textValue = calc(inputData.attackType, gias, sias, wsm)?.join('/');\n\n    return {\n        label: attackTypesDescriptionMap[inputData.attackType],\n        value: textValue,\n    };\n}\n","import {baseAF, rollbackAF} from \"../base-attacks\";\n\nexport function zeal(\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    return [\n        rollbackAF( 7, gias, sias, wsm ),\n        baseAF( 15, gias, sias, wsm ),\n    ];\n}\n","import {baseAF, rollbackAF} from \"../base-attacks\";\n\nexport function dragonTalon(\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    return [\n        rollbackAF( 4, gias, sias, wsm ),\n        baseAF( 13, gias, sias, wsm ),\n    ]\n}\n","import {baseAF, rollbackAF} from \"../base-attacks\";\n\nexport function strafe(\n    gias: number,\n    sias: number,\n    wsm: number,\n) {\n    return [\n        baseAF(7, gias, sias, wsm),\n        rollbackAF(3, gias, sias, wsm),\n        baseAF(11, gias, sias, wsm),\n    ]\n}\n","import {styled as matStyled} from \"@mui/material/styles\";\nimport {Paper} from \"@mui/material\";\n\nexport const FormPaper = matStyled(Paper)({\n    padding: '24px',\n});\n","import styled from \"styled-components\";\n\nexport const FormFieldsLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 12px;\n`\n","import {styled as matStyled} from \"@mui/material/styles\";\nimport {Select} from \"@mui/material\";\n\nexport const StyledSelect = matStyled(Select)({\n    minWidth: '195px',\n})\n","import {styled as matStyled} from \"@mui/material/styles\";\nimport {TextField} from \"@mui/material\";\n\nexport const StyledField = matStyled(TextField)({\n});\n\nexport const OutputField = matStyled(StyledField)({\n});\n","import React from 'react';\nimport {InputData} from \"../types/input-data\";\nimport useLocalStorage from \"use-local-storage\";\nimport {StoredState} from \"types/stored-state\";\n\nexport interface IStoredState {\n    pushItem: (item: InputData) => void,\n    removeItem: (item: InputData) => void,\n    items: InputData[];\n}\n\nexport const StoredStateContext =\n    React.createContext<IStoredState | null>(null);\n\nconst StoredStateProvider: React.FC = ({ children }) => {\n    const [storedState, setStoredState] =\n        useLocalStorage<StoredState>(\n            'input-data',\n            { items: [] },\n        );\n\n    const storedStateValue: IStoredState = {\n        pushItem: item => {\n            setStoredState({\n                ...storedState,\n                items: [\n                    ...(storedState?.items || []),\n                    item,\n                ],\n            })\n        },\n        removeItem: srcItem => {\n            const items = storedState?.items ?? [];\n            const srcItemJSON = JSON.stringify(srcItem);\n            const idx = items.findIndex((item) =>\n                JSON.stringify(item) === srcItemJSON\n            );\n\n            if (idx < 0) {\n                return;\n            }\n\n            const newItemsList = [\n                ...items.slice(0, idx),\n                ...items.slice(idx + 1),\n            ];\n\n            setStoredState({\n                ...storedState,\n                items: newItemsList,\n            });\n        },\n        items: storedState?.items ?? [],\n    }\n\n    return <StoredStateContext.Provider value={storedStateValue}>{children}</StoredStateContext.Provider>;\n};\n\nexport default StoredStateProvider;\n","import React, {useContext, useMemo, useState} from \"react\";\nimport {Box, Button, FormControl, InputLabel, MenuItem, SelectChangeEvent} from \"@mui/material\";\n\nimport {AttackTypes, attackTypesList} from \"types/attack-types\";\nimport {InputData} from \"types/input-data\";\nimport {calcAndFormat} from \"calcs/calc-and-format\";\n\nimport {FormPaper} from \"styled/form-paper\";\nimport {FormFieldsLayout} from \"styled/form-fields-layout\";\nimport {StyledSelect} from \"styled/select\";\nimport {OutputField, StyledField} from \"styled/field\";\nimport {StoredStateContext} from \"contexts/stored-state-context\";\n\nconst makeMenuItems = (srcArray: Array<string | { label: string; value: any; }>) => {\n    return srcArray.map(item => {\n        const [label, value] =\n            (Object.hasOwnProperty.call(item, 'label') && Object.hasOwnProperty.call(item, 'value'))\n                ? [\n                    (item as { label: string; value: any; }).label,\n                    (item as { label: string; value: any; }).value,\n                ]\n                : [item, item];\n\n        return <MenuItem key={value} value={value}>{label}</MenuItem>;\n    });\n}\n\nconst wsmMenuItems = makeMenuItems([\n    '-60',\n    '-50',\n    '-40',\n    '-30',\n    '-20',\n    '-15',\n    '-10',\n    '0',\n    '5',\n    '10',\n    '20',\n    '30',\n])\n\nconst attackTypeMenuItems = makeMenuItems(attackTypesList);\n\ntype FieldType = 'integer' | 'attackTypes';\n\nexport const MainCalc = () => {\n    const storedState = useContext(StoredStateContext);\n\n    const [inputDataState, setInputDataState] = useState<InputData>({\n        gias: '',\n        sias: '',\n        wsm: '',\n        attackType: AttackTypes.SMITE,\n    });\n\n    const handleFormStateInput = (field: keyof InputData, fieldType: FieldType, rawValue: string) => {\n        if (typeof rawValue === 'undefined' || rawValue?.length < 1) {\n            setInputDataState({\n                ...inputDataState,\n                [field]: '',\n            })\n            return;\n        }\n\n        switch (fieldType) {\n            case 'attackTypes':\n                setInputDataState({\n                    ...inputDataState,\n                    [field]: rawValue,\n                });\n                break;\n\n            case 'integer':\n            default:\n                (() => {\n                    const intValue = parseInt(rawValue);\n                    let targetValue = '' + intValue;\n                    if (isNaN(intValue)) {\n                        targetValue = '';\n                    }\n\n                    setInputDataState({\n                        ...inputDataState,\n                        [field]: targetValue,\n                    });\n                })()\n        }\n    }\n\n    const handleChange = (field: keyof InputData, fieldType: FieldType = 'integer') =>\n        (event: React.ChangeEvent<HTMLInputElement>) =>\n            handleFormStateInput(field, fieldType, event.target.value);\n\n    const handleSelectChange = (field: keyof InputData, fieldType: FieldType = 'integer') =>\n        (event: SelectChangeEvent<unknown>) =>\n            handleFormStateInput(field, fieldType, event.target.value as string);\n\n    const resultText = useMemo(\n        () => {\n            return calcAndFormat(inputDataState);\n        },\n        [inputDataState],\n        )\n\n    return <>\n        <FormPaper elevation={12}>\n            <Box\n                component=\"form\"\n                noValidate\n                autoComplete=\"off\"\n            >\n                <FormFieldsLayout>\n                    <FormControl>\n                        <InputLabel id=\"attack-type-label\">Attack Type</InputLabel>\n                        <StyledSelect\n                            labelId='attack-type-label'\n                            value={inputDataState.attackType}\n                            label='Attack Type'\n                            onChange={handleSelectChange('attackType', 'attackTypes')}\n                        >\n                            {attackTypeMenuItems}\n                        </StyledSelect>\n                    </FormControl>\n\n                    <FormControl>\n                        <InputLabel id=\"wsm-label\">Weapon Speed</InputLabel>\n                        <StyledSelect\n                            labelId=\"wsm-label\"\n                            value={inputDataState.wsm}\n                            label=\"Weapon Speed\"\n                            onChange={handleSelectChange('wsm')}\n                        >\n                            {wsmMenuItems}\n                        </StyledSelect>\n                    </FormControl>\n\n                    <FormControl>\n                        <StyledField\n                            label=\"Items IAS\"\n                            variant=\"outlined\"\n                            type={'number'}\n                            onChange={handleChange('gias')}\n                            value={inputDataState.gias}\n                        />\n                    </FormControl>\n\n                    <FormControl>\n                        <StyledField\n                            label=\"Skills IAS\"\n                            variant=\"outlined\"\n                            type={'number'}\n                            onChange={handleChange('sias')}\n                            value={inputDataState.sias}\n                        />\n                    </FormControl>\n                </FormFieldsLayout>\n            </Box>\n        </FormPaper>\n\n        <FormPaper elevation={12}>\n            <FormFieldsLayout>\n                <OutputField\n                    placeholder={'Please fill out the form'}\n                    label={resultText?.label ?? ''}\n                    value={resultText?.value ?? ''}\n                />\n\n                <Button\n                    disabled={!resultText?.value}\n                    onClick={() => storedState?.pushItem(inputDataState)}\n                >\n                    Store\n                </Button>\n            </FormFieldsLayout>\n        </FormPaper>\n    </>;\n}\n","import React, {useContext, useMemo} from \"react\";\n\nimport {FormPaper} from \"styled/form-paper\";\nimport {\n    IconButton,\n    styled as matStyled,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography\n} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport {calcAndFormat} from \"calcs/calc-and-format\";\nimport {StoredStateContext} from \"contexts/stored-state-context\";\nimport {InputData} from \"types/input-data\";\n\nconst FullHeightPaper = matStyled(FormPaper)({\n    minHeight: '100%',\n})\n\ntype ItemToRenderData = {\n    value: string;\n    label: string;\n    item: InputData;\n    key: string;\n}\n\nexport const StoredResults = () => {\n    const storedState = useContext(StoredStateContext);\n\n    const itemsToRender = useMemo(\n        (): Array<ItemToRenderData> => {\n            if (storedState === null || storedState.items.length < 1) {\n                return [];\n            }\n\n            const tmp = storedState.items\n                .map((item) => {\n                    const result = calcAndFormat(item);\n\n                    if (result === null) {\n                        return null;\n                    }\n\n                    const {value, label} = result;\n\n                    return {\n                        key: JSON.stringify(item),\n                        label,\n                        value,\n                        item,\n                    }\n                });\n\n            return tmp.filter(row => row !== null) as ItemToRenderData[];\n        },\n        [storedState],\n    )\n\n    return <FullHeightPaper elevation={12}>\n        <Table sx={{ minWidth: 500 }} aria-label=\"simple table\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>Attack</TableCell>\n                    <TableCell align=\"right\">GIAS</TableCell>\n                    <TableCell align=\"right\">SIAS</TableCell>\n                    <TableCell align=\"right\">WSM</TableCell>\n                    <TableCell align=\"right\">FPA</TableCell>\n                    <TableCell>Ctrls</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {itemsToRender.map((row) => (\n                    <TableRow\n                        key={row.key}\n                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                        <TableCell component=\"th\" scope=\"row\">\n                            {row.label}\n                        </TableCell>\n                        <TableCell align=\"right\">{row.item.gias}</TableCell>\n                        <TableCell align=\"right\">{row.item.sias}</TableCell>\n                        <TableCell align=\"right\">{row.item.wsm}</TableCell>\n                        <TableCell align=\"right\">\n                            <Typography\n                                variant='body1'\n                                color='primary'\n                            >\n                                {row.value}\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            <IconButton onClick={() => storedState?.removeItem(row.item)}><DeleteIcon/></IconButton>\n                        </TableCell>\n                    </TableRow>\n                ))}\n            </TableBody>\n        </Table>\n\n        { itemsToRender?.length < 1 &&\n        <p><Typography variant='body1'>No stored results</Typography></p>}\n    </FullHeightPaper>\n}\n","import React from 'react';\nimport '@fontsource/roboto';\nimport {Typography} from \"@mui/material\";\nimport styled from \"styled-components\";\n\nimport {MainCalc} from \"./components/main-calc\";\nimport {StoredResults} from \"./components/stored-results\";\nimport StoredStateProvider from \"./contexts/stored-state-context\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  row-gap: 24px;\n`;\n\nconst RowWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  column-gap: 24px;\n  justify-content: center;\n`\n\nconst ColumnWrapper = styled.div<{minWidth?: string}>`\n  display: flex;\n  flex-direction: column;\n  row-gap: 12px;\n  min-width: ${props => props?.minWidth ?? '320px'};\n`;\n\nfunction App() {\n\n\n    return (\n        <StoredStateProvider>\n            <AppWrapper>\n                <RowWrapper>\n                    <Typography variant={'h3'}>\n                        Uncapped IAS Calculator\n                    </Typography>\n                </RowWrapper>\n\n                <RowWrapper>\n                    <ColumnWrapper>\n                        <MainCalc/>\n                    </ColumnWrapper>\n\n                    <ColumnWrapper>\n                        <StoredResults/>\n                    </ColumnWrapper>\n                </RowWrapper>\n            </AppWrapper>\n        </StoredStateProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}